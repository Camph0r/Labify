{"ast":null,"code":"import axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: \"http://127.0.0.1:8000/\",\n  timeout: 5000,\n  headers: {\n    'Authorization': localStorage.getItem('access_token') ? 'Bearer ' + localStorage.getItem('access_token') : null,\n    //specifying the authorization header so wont need to do it in every request\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n});\n\n//code for refreshing tokens once they expire\n\naxiosInstance.interceptors.response.use(response => {\n  //if no errors\n  return response;\n}, async function (error) {\n  //if errors during request\n  const originalRequest = error.config;\n\n  //bunch of error handling codes i didnt bother to copy paste\n\n  // the part where we use refresh token to refresh the access token\n\n  if (error.response.data.code === 'token_not_valid' &&\n  //these 3 need to be valid for refreshing the token\n  error.response.status === 401 && error.response.statusText === 'Unauthorized') {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (refreshToken) {\n      //we first extract the expiry from refresh token\n\n      const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n\n      /*jwt has 3 divisions separated by a '.' so doing the split will create an array having 3 parts. The [1] contains the second part which \r\n      corresponds to the payload. The atob function then decodes the base64 encoded payload string. Finally, the JSON.parse converts the decoded \r\n      data into JS objects. \r\n       */\n\n      const now = Math.ceil(Date.now() / 1000); //calculates current time stamp in seconds. Date.now() returns time stamp in milliseconds and Math.ceil converts it to a whole number\n      console.log(tokenParts.exp); //tokenParts, now an object has the exp member that consists of it's expiry time.\n\n      if (tokenParts.exp > now) {\n        console.log('refreshing token...');\n        return axiosInstance.post('api/token/refresh/', {\n          refresh: refreshToken\n        }) //sending the refresh token to the server in json format\n        .then(res => {\n          localStorage.setItem('access_token', res.data.access); //updating the tokens received from server\n\n          axiosInstance.defaults.headers['Authorization'] = 'Bearer ' + localStorage.getItem('access_token'); //updating the authorization header\n\n          originalRequest.headers['Authorization'] = 'Bearer ' + localStorage.getItem('access_token');\n          return axiosInstance(originalRequest); //trying the original request but with new tokens\n        });\n      } else {\n        console.log('Refresh token is expired', tokenParts.exp, now);\n      }\n    } else {\n      console.log('Refresh token not available');\n    }\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","timeout","headers","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","data","code","status","statusText","refreshToken","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","console","log","exp","post","refresh","then","res","setItem","access","defaults","Promise","reject"],"sources":["C:/Users/user/Desktop/Go/SAAR-2024/frontend/labifyfrontend/src/axios.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nconst axiosInstance= axios.create({\r\n    baseURL: \"http://127.0.0.1:8000/\",\r\n    timeout: 5000,\r\n    headers: {\r\n        'Authorization': localStorage.getItem('access_token') ? 'Bearer '+localStorage.getItem('access_token') : null, //specifying the authorization header so wont need to do it in every request\r\n        'Content-Type': 'application/json',\r\n        accept: 'application/json'\r\n    }\r\n})\r\n\r\n//code for refreshing tokens once they expire\r\n\r\naxiosInstance.interceptors.response.use(\r\n    (response)=>{ //if no errors\r\n        return response;\r\n    },\r\n    async function (error){ //if errors during request\r\n        const originalRequest=error.config\r\n\r\n        //bunch of error handling codes i didnt bother to copy paste\r\n       \r\n\r\n        // the part where we use refresh token to refresh the access token\r\n\r\n        if (\r\n            error.response.data.code==='token_not_valid' && //these 3 need to be valid for refreshing the token\r\n            error.response.status===401 &&\r\n            error.response.statusText==='Unauthorized'\r\n        ){\r\n            const refreshToken=localStorage.getItem('refresh_token');\r\n\r\n            if (refreshToken){\r\n  \r\n              //we first extract the expiry from refresh token\r\n  \r\n              const tokenParts=JSON.parse(atob(refreshToken.split('.')[1])); \r\n  \r\n              /*jwt has 3 divisions separated by a '.' so doing the split will create an array having 3 parts. The [1] contains the second part which \r\n              corresponds to the payload. The atob function then decodes the base64 encoded payload string. Finally, the JSON.parse converts the decoded \r\n              data into JS objects. \r\n               */\r\n  \r\n              const now=Math.ceil(Date.now()/1000) //calculates current time stamp in seconds. Date.now() returns time stamp in milliseconds and Math.ceil converts it to a whole number\r\n              console.log(tokenParts.exp); //tokenParts, now an object has the exp member that consists of it's expiry time.\r\n  \r\n              if (tokenParts.exp > now){\r\n      console.log('refreshing token...')\r\n                  return axiosInstance.post('api/token/refresh/',{refresh : refreshToken}) //sending the refresh token to the server in json format\r\n                  .then((res)=>{\r\n                      localStorage.setItem('access_token', res.data.access) //updating the tokens received from server\r\n                      \r\n  \r\n                      axiosInstance.defaults.headers['Authorization'] = 'Bearer ' + localStorage.getItem('access_token'); //updating the authorization header\r\n\r\n                      \r\n                      originalRequest.headers['Authorization'] = 'Bearer ' + localStorage.getItem('access_token');\r\n                      \r\n                     \r\n                      return axiosInstance(originalRequest); //trying the original request but with new tokens\r\n                  })\r\n                  \r\n                  }\r\n                  else{\r\n                      console.log('Refresh token is expired', tokenParts.exp, now); \r\n                  }\r\n  \r\n              }\r\n              else{\r\n                  console.log('Refresh token not available')\r\n              }\r\n          }\r\n          return Promise.reject(error);\r\n        }\r\n\r\n        \r\n    \r\n)\r\n\r\n\r\n\r\nexport default axiosInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAED,KAAK,CAACE,MAAM,CAAC;EAC9BC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACL,eAAe,EAAEC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,SAAS,GAACD,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI;IAAE;IAC/G,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACZ;AACJ,CAAC,CAAC;;AAEF;;AAEAP,aAAa,CAACQ,YAAY,CAACC,QAAQ,CAACC,GAAG,CAClCD,QAAQ,IAAG;EAAE;EACV,OAAOA,QAAQ;AACnB,CAAC,EACD,gBAAgBE,KAAK,EAAC;EAAE;EACpB,MAAMC,eAAe,GAACD,KAAK,CAACE,MAAM;;EAElC;;EAGA;;EAEA,IACIF,KAAK,CAACF,QAAQ,CAACK,IAAI,CAACC,IAAI,KAAG,iBAAiB;EAAI;EAChDJ,KAAK,CAACF,QAAQ,CAACO,MAAM,KAAG,GAAG,IAC3BL,KAAK,CAACF,QAAQ,CAACQ,UAAU,KAAG,cAAc,EAC7C;IACG,MAAMC,YAAY,GAACb,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAExD,IAAIY,YAAY,EAAC;MAEf;;MAEA,MAAMC,UAAU,GAACC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,YAAY,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE7D;AACd;AACA;AACA;;MAEc,MAAMC,GAAG,GAACC,IAAI,CAACC,IAAI,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC,GAAC,IAAI,CAAC,EAAC;MACrCI,OAAO,CAACC,GAAG,CAACV,UAAU,CAACW,GAAG,CAAC,CAAC,CAAC;;MAE7B,IAAIX,UAAU,CAACW,GAAG,GAAGN,GAAG,EAAC;QACjCI,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QACtB,OAAO7B,aAAa,CAAC+B,IAAI,CAAC,oBAAoB,EAAC;UAACC,OAAO,EAAGd;QAAY,CAAC,CAAC,CAAC;QAAA,CACxEe,IAAI,CAAEC,GAAG,IAAG;UACT7B,YAAY,CAAC8B,OAAO,CAAC,cAAc,EAAED,GAAG,CAACpB,IAAI,CAACsB,MAAM,CAAC,EAAC;;UAGtDpC,aAAa,CAACqC,QAAQ,CAACjC,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;;UAGpGM,eAAe,CAACR,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;UAG3F,OAAON,aAAa,CAACY,eAAe,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC;MAEF,CAAC,MACG;QACAgB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEV,UAAU,CAACW,GAAG,EAAEN,GAAG,CAAC;MAChE;IAEJ,CAAC,MACG;MACAI,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC9C;EACJ;EACA,OAAOS,OAAO,CAACC,MAAM,CAAC5B,KAAK,CAAC;AAC9B,CAIR,CAAC;AAID,eAAeX,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}